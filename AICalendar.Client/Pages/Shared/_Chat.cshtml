<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat UI with Markdown</title>

    <!-- Marked.js for Markdown rendering -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <style>
        .chat-widget {
            height: 570px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background: #fff;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 12px 16px;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
            border-radius: 8px 8px 0 0;
        }

        .chat-messages {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
            background: #fff;
        }

        .message {
            margin-bottom: 12px;
            display: flex;
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-content {
            max-width: 80%;
            padding: 8px 12px;
            border-radius: 16px;
            font-size: 14px;
            line-height: 1.4;
        }

        .user-message .message-content {
            background: #007bff;
            color: white;
        }

        .ai-message .message-content {
            background: #f1f3f4;
            color: #333;
        }

        .chat-input-area {
            padding: 12px 16px;
            border-top: 1px solid #ddd;
            background: #fff;
            border-radius: 0 0 8px 8px;
        }

            .chat-input-area .form-control {
                border-right: 0;
                border-radius: 20px 0 0 20px;
            }

            .chat-input-area .btn {
                border-radius: 0 20px 20px 0;
                border-left: 0;
            }

        .typing-indicator {
            font-style: italic;
            color: #666;
            font-size: 13px;
        }

        /* Markdown Styling */
        .message-content p {
            margin: 4px 0;
        }

        .message-content ul {
            margin: 6px 0;
            padding-left: 20px;
        }

        .message-content pre {
            background: #272822;
            color: #f8f8f2;
            padding: 8px;
            border-radius: 6px;
            overflow-x: auto;
        }

        .message-content code {
            background: #f1f3f4;
            padding: 2px 4px;
            border-radius: 4px;
            font-family: monospace;
        }
    </style>
</head>
<body>

    <div class="chat-widget">
        <div class="chat-header">
            <h6 class="mb-0">AI Assistant</h6>
        </div>

        <div id="chat-messages" class="chat-messages">
            <div class="message ai-message">
                <div class="message-content">
                    Hello! How can I help you today?
                </div>
            </div>
        </div>

        <div class="chat-input-area">
            <div class="input-group">
                <input type="text" id="chat-input" class="form-control" placeholder="Type your message..." />
                <button type="button" id="send-btn" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatInput = document.getElementById('chat-input');
            const sendBtn = document.getElementById('send-btn');
            const chatMessages = document.getElementById('chat-messages');

            function addMessage(text, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = isUser ? 'message user-message' : 'message ai-message';

                const contentDiv = document.createElement('div');
                contentDiv.className = 'message-content';

                if (isUser) {
                    // user message = plain text
                    contentDiv.textContent = text;
                } else {
                    // ai message = markdown rendered
                    contentDiv.innerHTML = marked.parse(text);
                }

                messageDiv.appendChild(contentDiv);
                chatMessages.appendChild(messageDiv);

                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            async function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                // Add user message
                addMessage(message, true);
                chatInput.value = '';
                sendBtn.disabled = true;

                // Show typing indicator
                const typingDiv = document.createElement('div');
                typingDiv.className = 'message ai-message';
                typingDiv.innerHTML = '<div class="message-content typing-indicator">Typing...</div>';
                typingDiv.id = 'typing';
                chatMessages.appendChild(typingDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;

                try {
                    // Send message to the LlmProxyController
                    const response = await fetch('/api/LlmProxy/sendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ message })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to send message.');
                    }

                    const data = await response.json();
                    document.getElementById('typing').remove();

                    // Render AI response as markdown
                    addMessage(data.response, false);

                } catch (error) {
                    document.getElementById('typing').remove();
                    addMessage('Error: Unable to process your message.', false);
                } finally {
                    sendBtn.disabled = false;
                    chatInput.focus();
                }
            }

            // Send message on button click
            sendBtn.addEventListener('click', sendMessage);

            // Send message on Enter key
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // Focus input on load
            chatInput.focus();
        });
    </script>

</body>
</html>
